import logging
from typing import Dict, Optional
import telebot
from telebot.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton

from scraper import get_player_stats

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞
user_states = {}  # {user_id: {state: str, data: {}}}
STATE_WAITING_FOR_NICKNAME = 'waiting_for_nickname'
STATE_WAITING_FOR_SUPPORT_MESSAGE = 'waiting_for_support_message'



def format_stats_message(nickname: str, stats: Dict) -> str:
    """Format player stats into a readable message."""
    # –ë–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    display_name = stats.get('username', nickname)
    message = f"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ {display_name} .:</b>\n\n"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä–æ–∫–∞
    if stats.get('status') == "–ù–µ—Ç –∏–≥—Ä":
        message += f"üò¢ <b>–ò–≥—Ä–æ–∫ –µ—â–µ –Ω–µ —Å—ã–≥—Ä–∞–ª –Ω–∏ –æ–¥–Ω–æ–π –∏–≥—Ä—ã</b>\n"
        message += f"\n<i>–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã —Å —Å–∞–π—Ç–∞ iccup.com</i>"
        return message

    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏

    if stats.get('pts'):
        message += f" :</b> {stats['pts']}\n"

    if stats.get('rank'):
        message += f" <code> –†–∞–Ω–≥ </code> {stats['rank']}\n"

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä
    if stats.get('games_played'):
        message += f" <code>–í—Å–µ–≥–æ –∏–≥—Ä:</code> {stats['games_played']}\n"

        if stats.get('win_ratio') is not None:
            message += f"üìä <b>–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥:</b> {stats['win_ratio']}%\n"

    # –û—Ç–¥–µ–ª—å–Ω–æ –≤—ã–≤–æ–¥–∏–º W/L –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
    if stats.get('wins') is not None and stats.get('losses') is not None:
        message += f"‚úÖ <b>–ü–æ–±–µ–¥—ã/–ü–æ—Ä–∞–∂–µ–Ω–∏—è:</b> {stats['wins']} / {stats['losses']}\n"

    # KDA —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
    if stats.get('average_kills') is not None:
        message += f"‚öîÔ∏è <b>–°—Ä–µ–¥–Ω–µ–µ K/D/A:</b> {stats.get('average_kills', 0)}/{stats.get('average_deaths', 0)}/{stats.get('average_assists', 0)}\n"

    # –õ–æ–∫–∞—Ü–∏—è –∏ –¥—Ä—É–≥–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if stats.get('location'):
        message += f"üåç <b>–õ–æ–∫–∞—Ü–∏—è:</b> {stats['location']}\n"

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
    additional_keys = [
        'apm', 'farm', 'experience_per_min', 'gank_participation',
        'total_match_time', 'avg_match_time', 'leave_rate'
    ]

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∫—Ä–∞—Å–∏–≤—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π
    nice_names = {
        'apm': 'APM',
        'farm': '–§–∞—Ä–º',
        'experience_per_min': '–û–ø—ã—Ç –≤ –º–∏–Ω—É—Ç—É',
        'gank_participation': '–£—á–∞—Å—Ç–∏–µ –≤ –≥–∞–Ω–∫–∞—Ö',
        'total_match_time': '–û–±—â–µ–µ –≤—Ä–µ–º—è –º–∞—Ç—á–µ–π',
        'avg_match_time': '–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –º–∞—Ç—á–∞',
        'leave_rate': '–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã—Ö–æ–¥–æ–≤'
    }

    # –í—ã–≤–æ–¥–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    for key in additional_keys:
        if stats.get(key) is not None:
            display_name = nice_names.get(key, key.replace('_', ' ').title())

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Ü–µ–Ω—Ç
            if isinstance(stats[key], (float, int)) and 'rate' in key:
                message += f"üìä <b>{display_name}:</b> {stats[key]}%\n"
            else:
                message += f"üìä <b>{display_name}:</b> {stats[key]}\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏
    excluded_keys = ['username', 'pts', 'rank', 'games_played', 'win_ratio', 'wins', 'losses',
                     'average_kills', 'average_deaths', 'average_assists', 'location', 'status'] + additional_keys

    for key, value in stats.items():
        if key not in excluded_keys:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è
            display_name = key.replace('_', ' ').title()
            message += f"‚ÑπÔ∏è <b>{display_name}:</b> {value}\n"

    return message


def setup_bot(token: str) -> telebot.TeleBot:
    """Setup and return the bot instance."""
    bot = telebot.TeleBot(token, parse_mode='HTML')

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    def get_main_menu():
        markup = ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        stats_btn = KeyboardButton('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
        contests_btn = KeyboardButton('üèÜ –ö–æ–Ω–∫—É—Ä—Å—ã')
        FAQ_btn = KeyboardButton('üèÜ F.A.Q')
        Tech_btn = KeyboardButton('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞')
        markup.add(stats_btn, contests_btn, FAQ_btn, Tech_btn)
        return markup

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    @bot.message_handler(commands=['start'])
    def start_command(message: Message):
        """Sends a welcome message when the command /start is issued."""
        bot.send_message(
            message.chat.id,
            f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n\n'
            '–Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–æ–≤ DotA —Å —Å–∞–π—Ç–∞ iccup.com. '
            '–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ —É–∑–Ω–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ª—é–±–æ–≥–æ –∏–≥—Ä–æ–∫–∞!\n\n'
            '–ß—Ç–æ —è —É–º–µ—é:\n'
            '‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –Ω–∏–∫–Ω–µ–π–º—É\n'
            '‚Ä¢ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ\n'
            '‚Ä¢ –°–æ–æ–±—â–∞—Ç—å –æ –Ω–æ–≤—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–∞—Ö –∏ —Å–æ–±—ã—Ç–∏—è—Ö\n\n'
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /stats –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.',
            reply_markup=get_main_menu()
        )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu
    @bot.message_handler(commands=['menu'])
    def menu_command(message: Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        bot.send_message(
            message.chat.id,
            '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
            reply_markup=get_main_menu()
        )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
    @bot.callback_query_handler(func=lambda call: True)
    def handle_callback_query(call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–±—ç–∫–∞
        callback_data = call.data

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if callback_data.startswith('info_'):
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            info_key = callback_data.split('_')[1]
            if info_key in INFO_DATABASE:
                bot.answer_callback_query(call.id)
                bot.send_message(call.message.chat.id, INFO_DATABASE[info_key])
            else:
                bot.answer_callback_query(call.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)

        # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        elif callback_data == 'back_to_main':
            bot.answer_callback_query(call.id)
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
    @bot.message_handler(commands=['stats'])
    def stats_command(message: Message):
        """Process the /stats command."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        command_parts = message.text.split()

        if len(command_parts) > 1:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –Ω–∏–∫–Ω–µ–π–º
            nickname = command_parts[1].strip()
            process_stats_request(message, nickname)
        else:
            # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –Ω–µ—Ç, –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –Ω–∏–∫–Ω–µ–π–º
            msg = bot.send_message(
                message.chat.id,
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞:'
            )
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞
            user_states[message.from_user.id] = {'state': STATE_WAITING_FOR_NICKNAME}
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
            bot.register_next_step_handler(msg, process_nickname_input)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∏–∫–Ω–µ–π–º–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /stats
    def process_nickname_input(message: Message):
        """Process nickname input after /stats command."""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        user_id = message.from_user.id

        if user_id in user_states and user_states[user_id]['state'] == STATE_WAITING_FOR_NICKNAME:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            nickname = message.text.strip()

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_states.pop(user_id, None)

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            process_stats_request(message, nickname)
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            pass


    # –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    def process_stats_request(message: Message, nickname: str):
        """Process a statistics request for a given nickname."""
        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        logging.info(f"User {message.from_user.id} requested stats for '{nickname}'")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..." –ø–æ–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
        bot.send_chat_action(message.chat.id, 'typing')

        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
            stats = get_player_stats(nickname)

            if stats:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                formatted_message = format_stats_message(nickname, stats)
                bot.send_message(message.chat.id, formatted_message)
            else:
                bot.send_message(
                    message.chat.id,
                    f'–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–∞ —Å –Ω–∏–∫–Ω–µ–π–º–æ–º "{nickname}". '
                    f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n'
                    f'–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stats –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞.',
                    reply_markup=get_main_menu()
                )
        except Exception as e:
            logging.error(f"Error processing stats for {nickname}: {str(e)}")
            bot.send_message(
                message.chat.id,
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n'
                '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stats –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞.',
                reply_markup=get_main_menu()
            )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel
    @bot.message_handler(commands=['cancel'])
    def cancel_command(message: Message):
        """Cancel the current operation."""
        user_id = message.from_user.id

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id in user_states:
            user_states.pop(user_id, None)

        bot.send_message(
            message.chat.id,
            '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.',
            reply_markup=get_main_menu()
        )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é –∏ –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
    @bot.message_handler(func=lambda message: True, content_types=['text'])
    def text_message_handler(message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = message.from_user.id
        text = message.text.strip()

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞
        if user_id in user_states:
            state = user_states[user_id]['state']

            if state == STATE_WAITING_FOR_NICKNAME:
                # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –Ω–∏–∫–Ω–µ–π–º
                process_nickname_input(message)
                return

            elif state == STATE_WAITING_FOR_SUPPORT_MESSAGE:
                # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∏
                process_support_message(message)
                return

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
        if text.startswith('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'):
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤–≤–æ–¥ –Ω–∏–∫–Ω–µ–π–º–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            msg = bot.send_message(
                message.chat.id,
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞:'
            )
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞
            user_states[user_id] = {'state': STATE_WAITING_FOR_NICKNAME}
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
            bot.register_next_step_handler(msg, process_nickname_input)


        elif text.startswith('üèÜ –ö–æ–Ω–∫—É—Ä—Å—ã'):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö
            contest_message = (
                "üé≠ <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–æ–Ω–∫—É—Ä—Å: <a href='https://t.me/iCCup/6839'>–ü–∞—Ä–æ–¥–∏—Å—Ç</a></b>"

            )
            bot.send_message(message.chat.id, contest_message)

        elif text.startswith('üèÜ F.A.Q'):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ FAQ
            faq_message = (
                "–∑–¥–µ—Å—å –±—É–¥–µ—Ç FAQ"

            )
            bot.send_message(message.chat.id, faq_message)

        elif text.startswith('–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞'):
            # Tech supp
            Tech_message = (
                "1. <a href='https://t.me/iCCupTech/2'>–°—É—â–µ—Å—Ç–≤—É—é—Ç –ª–∏ –≤–µ—Ä—Å–∏–∏ –ª–∞—É–Ω—á–µ—Ä–∞ –¥–ª—è Mac OS –∏ unix?—Ç</a> .\n"
                "2. <a href='https://t.me/iCCupTech/3'> Could not connect to Battle.Net/–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ</a>.\n"

            )
            bot.send_message(message.chat.id, Tech_message)

        else:
            # –ï—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É
            bot.send_message(
                message.chat.id,
                '–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n'
                '/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n'
                '/menu - –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é\n'
                '/stats - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞\n'
                '/cancel - –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é',
                reply_markup=get_main_menu()
            )

    return bot
